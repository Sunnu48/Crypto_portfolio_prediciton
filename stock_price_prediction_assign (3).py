# -*- coding: utf-8 -*-
"""Stock Price prediction assign.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12U7JMru4QBWIHYbxuIMjkJzgwjkC1BrA
"""



#importing modules
import pandas as pd
import numpy as np
import numpy
import math
from sklearn.metrics import mean_squared_error
from numpy import array
import matplotlib.pyplot as plt

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

#LSTM model for time series prediction
model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(50,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')



tech_list1 = ["CSPR-USD","DOGE-USD","ETH-USD","MASK8536-USD","SHIB-USD"]
 
# create empty list
df1 = []
 
# append datasets into the list
for i in range(len(tech_list1)):
    temp_df = pd.read_csv("/content/drive/MyDrive/Trend Coins/"+tech_list1[i]+".csv")
    df1.append(temp_df['Adj Close'])

tech_list2 = ["AR-USD","DOGE-USD","CHZ-USD","LRC-USD","OKB-USD","USDT-USD"]
 
# create empty list
df2 = []
 
# append datasets into the list
for i in range(len(tech_list2)):
    temp_df = pd.read_csv("/content/drive/MyDrive/Return7/"+tech_list2[i]+".csv")
    df2.append(temp_df['Adj Close'])

tech_list3 = ["ARNX-USD","FNX-USD","DAPS-USD","LRC-USD","MATIC-USD","MKD-USD"]
 
# create empty list
df3 = []
 
# append datasets into the list
for i in range(len(tech_list3)):
    temp_df = pd.read_csv("/content/drive/MyDrive/Diverse/"+tech_list3[i]+".csv")
    df3.append(temp_df['Adj Close'])

tech_list4 = ["AR-USD","FNX-USD","BTC-USD","LRC-USD","MATIC-USD","MIOTA-USD","DOGE-USD","ETH-USD"]
 
# create empty list
df4 = []
 
# append datasets into the list
for i in range(len(tech_list4)):
    temp_df = pd.read_csv("/content/drive/MyDrive/Final portfolio/"+tech_list4[i]+".csv")
    df4.append(temp_df['Adj Close'])

#function to create training and test data
def create_dataset(dataset, time_step=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 
		dataX.append(a)
		dataY.append(dataset[i + time_step, 0])
	return numpy.array(dataX), numpy.array(dataY)

#df=[df1,df2,df3,df4]
#print(df[0])

#predicting 30 day stock price of portfolio from the day of investment
#new_df=pd.DataFrame.from_dict(df1)
category=[]
tech_list=[tech_list1,tech_list2,tech_list3,tech_list4]
df=[df1,df2,df3,df4]
all_pred_data={}
for each in range(len(tech_list)):
  for j in range(len(tech_list[each])):
    df6=df[each][j]
    print('this is for',tech_list[each][j])
    from sklearn.preprocessing import MinMaxScaler
    scaler=MinMaxScaler(feature_range=(0,1))
    df6=scaler.fit_transform(np.array(df6).reshape(-1,1))

    training_size=int(len(df6)*0.65)
    test_size=len(df6)-training_size
    train_data,test_data=df6[0:training_size,:],df6[training_size:len(df6),:1]

    time_step = 50
    X_train, y_train = create_dataset(train_data, time_step)
    X_test, ytest = create_dataset(test_data, time_step)
    X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
    X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

    model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)
    train_predict=model.predict(X_train)
    test_predict=model.predict(X_test)

    train_predict=scaler.inverse_transform(train_predict)
    test_predict=scaler.inverse_transform(test_predict)

    print(math.sqrt(mean_squared_error(y_train,train_predict)))
    print(math.sqrt(mean_squared_error(ytest,test_predict)))
    print("error values----")

    look_back=50
    trainPredictPlot = numpy.empty_like(df6)
    trainPredictPlot[:, :] = np.nan
    trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict
    # shift test predictions for plotting
    testPredictPlot = numpy.empty_like(df6)
    testPredictPlot[:, :] = numpy.nan
    testPredictPlot[len(train_predict)+(look_back*2)+1:len(df6)-1, :] = test_predict
    # plot baseline and predictions
    plt.plot(scaler.inverse_transform(df6))
    plt.plot(trainPredictPlot)
    plt.plot(testPredictPlot)
    plt.show()

    x_input=test_data[len(test_data)-50:].reshape(1,-1)
    temp_input=list(x_input)
    temp_input=temp_input[0].tolist()

    lst_output=[]
    n_steps=50
    i=0
    while(i<30):
        
        if(len(temp_input)>50):
            #print(temp_input)
            x_input=np.array(temp_input[1:])
            print("{} day input {}".format(i,x_input))
            x_input=x_input.reshape(1,-1)
            x_input = x_input.reshape((1, n_steps, 1))
            #print(x_input)
            yhat = model.predict(x_input, verbose=0)
            print("{} day output {}".format(i,yhat))
            temp_input.extend(yhat[0].tolist())
            temp_input=temp_input[1:]
            #print(temp_input)
            lst_output.extend(yhat.tolist())
            i=i+1
        else:
            x_input = x_input.reshape((1, n_steps,1))
            yhat = model.predict(x_input, verbose=0)
            print(yhat[0])
            temp_input.extend(yhat[0].tolist())
            print(len(temp_input))
            lst_output.extend(yhat.tolist())
            i=i+1
        

    all_pred_data[tech_list[each][j]]=scaler.inverse_transform(lst_output)
    for k in all_pred_data:
      all_pred_data[k]=all_pred_data[k].flatten()
    final_df=pd.DataFrame(all_pred_data)
    final_df.to_csv("/content/drive/MyDrive/PredictedValues"+"categary"+str(each+1)+".csv")
    category.append(final_df)

for i in all_pred_data:
  all_pred_data[i]=all_pred_data[i].flatten()
#all_pred_data
final_df=pd.DataFrame(all_pred_data)

final_df